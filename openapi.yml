swagger: "2.0"
info:
  description: "API specs for the connection between the backend and the frontend of the SmartForms project."
  version: "1.0.0"
  title: "Swagger SmartForms"

paths:
  # preview a form, without creating it
  /form/preview:
    post:
      tags:
      - "form"
      summary: "Preview the PDF output of a given form description"
      description: "The backend creates a form based on the specification passed to it, and generates a PDF to be displayed in a side-panel. This DOES NOT save the PDF file."
      consumes:
      - "application/json"
      produces:
      - "application/pdf"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Description of the form to create."
        required: true
        schema:
          $ref: "#/definitions/FormDescription"
      responses:
        "405":
          description: "Invalid input. String stores the error message."
          schema:
            type: "string"
        "200":
          description: "OK. String stores the binary PDF."
          schema:
            type: "string"
            format: "binary"
  # create a form
  /form/create:
    post:
      tags:
      - "form"
      summary: "Create the PDF form of a given form description"
      description: "The backend creates a form based on the specification passed to it, and generates a PDF, which is saved to DB."
      consumes:
      - "application/json"
      produces:
      - "application/pdf"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Description of the form to create."
        required: true
        schema:
          $ref: "#/definitions/FormDescription"
      responses:
        "405":
          description: "Invalid input. String stores the error message."
          schema:
            type: "string"
        "200":
          description: "OK. String stores the binary PDF."
          schema:
            type: "object"
            properties: 
              formId:
                type: "integer"
              formPdfBinary:
                type: "string"
                format: "binary"
      security:
        - smartFormsAuth:
          - "access"
  # list all forms created by a user
  /form/list:
    get:
      tags:
      - "form"
      summary: "Returns a list of forms created by the user"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Data for pagination"
        required: true
        schema:
          type: "object"
          properties:
            # offset of the requested data
            offset:
              type: "integer"
            # number of requested elements
            count:
              type: "integer"
      responses:
        "405":
          description: "User is not authenticated."
        "200":
          description: "OK."
          schema:
            type: "object"
            properties: 
              totalFormsCount:
                type: "integer"
              forms:
                type: "array"
                items: 
                  $ref: "#/definitions/FormDescription"
      security:
        - smartFormsAuth:
          - "access"
  # list all forms created by a user
  /form/{formId}:
    get:
      tags:
      - "form"
      summary: "Returns the form indicated by the Id"
      description: ""
      produces:
      - "application/json"
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized"
        "200":
          description: "OK."
          schema:
            $ref: "#/definitions/FormDescription"
      security:
        - smartFormsAuth:
          - "access"
    delete:
      tags:
      - "form"
      summary: "Deletes the form indicated by the Id"
      description: ""
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized"
        "200":
          description: "OK."
      security:
        - smartFormsAuth:
          - "access"
  # changes if a form can be filled online or not
  /form/online-access/{formId}:
    put:
      tags:
      - "form"
      summary: "Sets if a form can be filled online or not"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "if the form can be filled online or not"
        required: true
        schema:
          type: "object"
          properties: 
            canBeFilledOnline:
              type: "boolean"
            needsToBeSignedIn:
              type: "boolean"
      responses:
        "405":
          description: "User is not authenticated, form does not exist or not authorized."
        "200":
          description: "OK."
      security:
        - smartFormsAuth:
          - "access"
  # fill a form online
  # resolves only if the form can be filled online
  /entry/{formId}:
    get:
      tags:
      - "entry"
      summary: "Returns the form indicated by the Id, to be filled"
      description: ""
      produces:
      - "application/json"
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized."
        "201":
          description: "The form can't be filled online."
        "200":
          description: "OK."
          schema:
            $ref: "#/definitions/FormDescription"
    post:
      tags:
      - "entry"
      summary: "Sends a user's response to the form."
      description: ""
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Answers to the form"
        required: true
        schema:
          $ref: "#/definitions/FormAnswer"
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized"
        "200":
          description: "OK."
  # lists entries for a form
  /entry/view/{formId}:
    get:
      tags:
      - "entry"
      summary: "Returns the entries sent to a form"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Data for pagination"
        required: true
        schema:
          type: "object"
          properties:
            # offset of the requested data
            offset:
              type: "integer"
            # number of requested elements
            count:
              type: "integer"
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized."
        "201":
          description: "The form can't be filled online."
        "200":
          description: "OK."
          schema:
            type: "object"
            properties: 
              totalEntriesCount:
                type: "integer"
              entries:
                type: "array"
                items:
                  $ref: "#/definitions/FormAnswer"
      security:
        - smartFormsAuth:
          - "access"
  # tries to extract content from a form
  /inference:
    post:
      tags:
      - "inference"
      summary: "Extracts content from a form"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Data for pagination"
        required: true
        schema:
          type: "object"
          properties: 
            file:
              title: "File"
              type: "array"
              items:
                type: "string"
                format: "binary"
      responses:
        "405":
          description: "User is not authenticated, form doesn't exist or not authorized."
        "200":
          description: "OK."
          schema:
            $ref: "#/definitions/FormAnswer"
            

securityDefinitions:
  smartFormsAuth:
    type: "oauth2"
    authorizationUrl: "google.com sau cv de genu"
    flow: "implicit"
    scopes:
      access: "be authenticated"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"


definitions:
  # stores a single question with text answer
  FormTextQuestion:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      maxAnswerLength:
        type: "integer"
  
  # stores a single question with multiple-choice answer
  FormMultipleChoiceQuestion:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      choices:
        type: "array"
        items:
          type: "string"

  # wrapper for having one of two possible questions
  FormQuestion:
    type: "object"
    properties:
      textQuestion:
        $ref: "#/definitions/FormTextQuestion"
      multipleChoiceQuestion:
        $ref: "#/definitions/FormMultipleChoiceQuestion"

  # info about a form 
  FormDescription:
    type: "object"
    properties:
      name:
        type: "string"
      formId:
        type: "string"
      description:
        type: "string"
      questions:
        type: "array"
        items: 
          $ref: "#/definitions/FormQuestion"
      # if the users are able to submit answers by visiting the
      # specific url.
      canBeFilledOnline:
        type: "boolean"
      # if online users have to be signed-in
      needsToBeSignedInToSubmit:
        type: "boolean"
      
  # info about a form 
  FormAnswer:
    type: "object"
    properties:
      answerId:
        type: "string"
      formId:
        type: "string"
      # empty if not logged in
      userId:
        type: "string"
      answers:
        type: "array"
        items:
          type: "string"

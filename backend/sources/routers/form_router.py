from typing import List
from fastapi import APIRouter, Response
from pydantic import BaseModel
import database
import routers.models as models
import pdf_generator
import internal_types

router = APIRouter(
    prefix="/form",
    tags=["form"]
)

class PreviewFormReturnModel(BaseModel):
    formPdfBase64: str

@router.post(
    "/preview",
    responses = {
        200: {
            "model": PreviewFormReturnModel,
            "description": "Base64 encoding of the PDF file."
        },
        201: {
            "model": str,
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_preview(form: models.FormDescription):
    """
        Returns a preview of the pdf generated by a form.
        DOES NOT update the database.
    """
    try:
        model = pdf_generator.create_form_from_description(form)
        ret = PreviewFormReturnModel(
            formPdfBase64=model.extract_base_64_encoded_pdf()
        )
        return ret
    except Exception as e:
        return Response(repr(e), status_code=201)


class CreateFormReturnModel(BaseModel):
    formId: str
    formPdfBase64: str

@router.post(
    "/create",
    responses = {
        200: {
            "model": CreateFormReturnModel,
            "description": "Ok. Returns the new ID, and the base64 encoding of the PDF."
        },
        201: {
            "model": str,
            "description": "Invalid input. Error message."
        }
    }
)
async def create_form(form: models.FormDescription):
    """
        Creates a form, and returns its id and a preview.
    """
    try:
        model = pdf_generator.create_form_from_description(form)
        model.set_id()
        database.get_collection(database.FORMS).insert_one(model.to_dict())
        resp = CreateFormReturnModel(
            formId=model.description.formId,
            formPdfBase64=model.extract_base_64_encoded_pdf()
        )
        return resp
    except Exception as e:
        return Response(repr(e), status_code=201)


class ListFormReceiveModel(BaseModel):
    offset: int
    count: int

class ListFormReturnModel(BaseModel):
    forms: List[models.FormDescription]
    totalFormsCount: int

@router.post(
    "/list",
    responses = {
        200: {
            "model": ListFormReturnModel,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_forms_list(params: ListFormReceiveModel):
    """
        Returns the list of all available forms.
    """

    db = database.get_collection(database.FORMS)
    
    forms = [internal_types.pdf_form_from_dict(i).description for i in db.find(skip=params.offset, limit=params.count)]
    nr_forms = db.count_documents({})

    return ListFormReturnModel(
        forms=forms,
        totalFormsCount=nr_forms
    )



@router.get(
    "/description/{formId}",
    responses = {
        200: {
            "model": models.FormDescription,
            "description": "Ok."
        },
        400: {
            "model": str,
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_description(formId: str):
    """
        Returns the description of a given form.
    """
    db = database.get_collection(database.FORMS)
    forms = [internal_types.pdf_form_from_dict(i).description for i in db.find({"formId": formId})]

    if len(forms) > 1:
        raise Exception("Found multiple forms with same Id!")
    
    if len(forms) == 0:
        raise Exception("No form with the given Id was found!")
    
    return internal_types.pdf_form_from_dict(forms[0]).description


@router.get(
    "/pdf/{formId}",
    responses = {
        200: {
            "model": bytes,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_pdf(formId: str):
    """
        Returns the PDF of a given form.
    """
    return { "status": "ok" }


@router.delete(
    "/{formId}",
    responses = {
        200: {
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def delete_form(formId: str):
    """
        Deletes a form.
    """
    return { "status": "ok" }


class UpdateFormReceiveModel(BaseModel):
    canBeFilledOnline: bool
    needsToBeSignedIn: bool

@router.put(
    "/online-access/{formId}",
    responses = {
        200: {
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def update_form(params: UpdateFormReceiveModel, formId: str):
    """
        Updates online visibility of a form.
        Note: This does not affect the owner of the form.
    """
    return { "status": "ok" }
from typing import List
from fastapi import APIRouter, File, UploadFile, Response
from pydantic import BaseModel
import routers.models as models
import pdf_generator
import fastapi
from fastapi.responses import StreamingResponse
import io

router = APIRouter(
    prefix="/form",
    tags=["form"]
)


@router.post(
    "/preview",
    responses = {
        200: {
            "model": bytes,
            "description": "Bytes represent a PDF file."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_preview(form: models.FormDescription):
    """
        Returns a preview of the pdf generated by a form.
        DOES NOT update the database.
    """
    try:
        model = pdf_generator.create_form_from_description(form)
        return Response(model.extract_raw_pdf_bytes(), media_type="application/pdf")
    except Exception as e:
        return Response(repr(e), status_code=200)
        # TODO: Change status code


class CreateFormReturnModel(BaseModel):
    formId: str
    formPdfBinary: bytes

@router.post(
    "/create",
    responses = {
        200: {
            "model": CreateFormReturnModel,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def create_form(form: models.FormDescription):
    """
        Creates a form, and returns its id and a preview.
    """
    pass


class ListFormReceiveModel(BaseModel):
    offset: int
    count: int

class ListFormReturnModel(BaseModel):
    forms: List[models.FormDescription]
    totalFormsCount: int

@router.get(
    "/list",
    responses = {
        200: {
            "model": ListFormReturnModel,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_forms_list(params: ListFormReceiveModel):
    """
        Returns the list of all available forms.
    """
    return { "status": "ok" }


@router.get(
    "/description/{formId}",
    responses = {
        200: {
            "model": models.FormDescription,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_description(formId: str):
    """
        Returns the description of a given form.
    """
    return { "status": "ok" }


@router.get(
    "/pdf/{formId}",
    responses = {
        200: {
            "model": bytes,
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def get_form_pdf(formId: str):
    """
        Returns the PDF of a given form.
    """
    return { "status": "ok" }


@router.delete(
    "/{formId}",
    responses = {
        200: {
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def delete_form(formId: str):
    """
        Deletes a form.
    """
    return { "status": "ok" }


class UpdateFormReceiveModel(BaseModel):
    canBeFilledOnline: bool
    needsToBeSignedIn: bool

@router.put(
    "/online-access/{formId}",
    responses = {
        200: {
            "description": "Ok."
        },
        400: {
            "description": "Invalid input. Error message."
        }
    }
)
async def update_form(params: UpdateFormReceiveModel, formId: str):
    """
        Updates online visibility of a form.
        Note: This does not affect the owner of the form.
    """
    return { "status": "ok" }